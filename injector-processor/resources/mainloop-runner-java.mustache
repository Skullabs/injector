package {{packageName}};

import injector.*;
import java.util.List;
import java.util.concurrent.Executors;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.TimeUnit;

/**
* Auto generated server configuration for {@link {{packageName}}.{{simpleName}}}.
*/
@ExposedAs( Job.class )
@{{jdkGeneratedAnnotation}}("injector.apt.MainloopMethodProcessor")
public class {{className}} implements Job {

    private static final ExecutorService BACKGROUND = Executors.newFixedThreadPool({{numberOfInstances}});
    private static boolean JOB_MAY_RUN = true;

    static {
        Runtime.getRuntime().addShutdownHook(new Thread() {
            public void run() {
                try {
                    JOB_MAY_RUN = false;
                    BACKGROUND.shutdown();
                    if (!BACKGROUND.awaitTermination({{gracefulShutdownTime}}, TimeUnit.SECONDS)) {
                        final List<Runnable> droppedTasks = BACKGROUND.shutdownNow();
                        System.err.println(
                            "Executor was abruptly shut down. " + droppedTasks.size() + " tasks will not be executed.");
                    }
                } catch (final InterruptedException cause) {
                    cause.printStackTrace();
                }
            }
        });
    }

    private final {{simpleName}} instance;

    public {{className}}( final {{simpleName}} instance ){
        this.instance = instance;
    }

    public void execute() throws Exception {
        for ( int i=0; i<{{numberOfInstances}}; i++ ) {
            BACKGROUND.submit( new Runnable() {

                @Override
                public void run(){
                    try {
                        while( JOB_MAY_RUN ){
                            instance.{{method}}();
                        }
                    } catch( final Throwable cause ) {
                        System.err.println(
                            "Failed to execute {{simpleName}}.{{method}} in background. Aborted." );
                        cause.printStackTrace();
                    }
                }
            });
        }
    }
}
