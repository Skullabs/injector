package {{packageName}};

import injector.*;

@{{jdkGeneratedAnnotation}}("injector.apt.InjectorProcessor")
public class {{simpleName}}InjectorFactory{{uniqueIdentifier}} implements Factory<{{simpleName}}> {

    volatile private {{simpleName}} instance;

    public {{simpleName}} create(Injector context, Class targetClass) {
        if ( instance == null )
            synchronized (this) {
                if ( instance == null )
                    instance = newInstance( context );
            }
        return instance;
    }

    public Class<{{simpleName}}> getExposedType() {
        return {{simpleName}}.class;
    }

    private {{simpleName}} newInstance(Injector context){
        return new {{simpleName}}(
{{#methods}}{{#constructor}}{{#parameterIterable}}{{^first}},{{/first}}
{{^data.allOf}}context.instanceOf( {{data.type}}.class, getExposedType() ){{/data.allOf}}
{{#data.allOf}}context.instancesExposedAs( {{data.allOf}} ){{/data.allOf}}
{{/parameterIterable}}{{/constructor}}
{{/methods}}
        );
    }
}